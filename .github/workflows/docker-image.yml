# This workflow build and push a Docker container to Harbor and deploys it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 3. Build a docker container
# 4. Publish it to Harbor
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege


name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }} # TODO: update Google Cloud project id
  SERVICE: ${{ secrets.RUN_SERVICE }} # TODO: update Cloud Run service name
  REGION: ${{ secrets.RUN_REGION }} # TODO: update Cloud Run service region

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Login to Harbor Registry
      run: docker login -u '${{ secrets.HARBOR_USERNAME }}' -p ${{ secrets.HARBOR_PASSWORD }} containers.deltares.nl

    - name: Make envfile
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_VUE_APP_MAPBOX_TOKEN: ${{ secrets.VUE_APP_MAPBOX_TOKEN }}
        envkey_VUE_APP_MAPBOX_STYLE: ${{ secrets.VUE_APP_MAPBOX_STYLE }}
        envkey_VUE_APP_MAPBOX_LAYERS_STYLE: ${{ secrets.VUE_APP_MAPBOX_LAYERS_STYLE }}
        envkey_VUE_APP_SERVER_URL: ${{ secrets.VUE_APP_SERVER_URL }}
        envkey_VUE_APP_CATALOG_URL: ${{ secrets.VUE_APP_CATALOG_URL }}

        envkey_VUE_APP_AUTH_AUTHORITY: ${{ secrets.VUE_APP_AUTH_AUTHORITY }}
        envkey_VUE_APP_AUTH_ID: ${{ secrets.VUE_APP_AUTH_ID }}
        envkey_VUE_APP_AUTH_TYPE: ${{ secrets.VUE_APP_AUTH_TYPE }}
        envkey_VUE_APP_AUTH_SCOPE: ${{ secrets.VUE_APP_AUTH_SCOPE }}

        envkey_VUE_APP_STORIES_CONFIGURATION_URL: ${{ secrets.VUE_APP_STORIES_CONFIGURATION_URL }}
        envkey_VUE_APP_NEWS_CONFIGURATION_URL: ${{ secrets.VUE_APP_NEWS_CONFIGURATION_URL }}
        file_name: .env

    - name: Build Docker image
      run: docker build . -f Dockerfile -t containers.deltares.nl/${{ secrets.CONTAINER_REPOSITORY }}/dgds-frontend

    - name: Push Docker image
      run: docker push containers.deltares.nl/${{ secrets.CONTAINER_REPOSITORY }}/dgds-frontend

  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: europe-west4-docker.pkg.dev/dgds-i1000482-002/dgds-frontend/dgds-frontend:latest

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
